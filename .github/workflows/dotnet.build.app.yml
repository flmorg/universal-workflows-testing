on:
  workflow_call:
    inputs:
      dockerRepository: # docker image repository
        required: true
        type: string
      githubContext: # github context in JSON format
        required: true
        type: string
      executableName:
        required: false
        type: string
        default: Executable
      outputName:
        required: false
        type: string
        default: Executable
      selfContained:
        required: false
        type: boolean
        default: true
      baseImage:
        required: false
        type: string
        default: 8.0-alpine

jobs:
  build_app:
    runs-on: ubuntu-latest
    steps:

      - name: Set github context
        timeout-minutes: 1
        run: |
          echo 'githubRepository=${{ fromJSON(inputs.githubContext).repository }}' >> $GITHUB_ENV
          echo 'githubSha=${{ fromJSON(inputs.githubContext).sha }}' >> $GITHUB_ENV
          echo 'githubRef=${{ fromJSON(inputs.githubContext).ref }}' >> $GITHUB_ENV
          echo 'githubHeadRef=${{ fromJSON(inputs.githubContext).head_ref }}' >> $GITHUB_ENV

      - name: Initialize build info
        timeout-minutes: 1
        run: |
          githubHeadRef=${{ env.githubHeadRef }}
          latestDockerTag=""
          commitDockerTag=""
          versionDockerTag=""

          if [[ "$githubRef" =~ ^"refs/tags/" ]]; then
            branch=${githubRef##*/}
            latestDockerTag="latest"
            versionDockerTag=${branch#v}
            commitDockerTag="${branch#v}-${{ env.githubSha }}"
          else
            # Determine if this run is for the main branch or another branch
            if [[ -z "$githubHeadRef" ]]; then
              # Main branch
              githubRef=${{ env.githubRef }}
              branch=${githubRef##*/}
              latestDockerTag="$branch"
              commitDockerTag="$branch-${{ env.githubSha }}"
            else
              # Pull request
              branch=$githubHeadRef
              latestDockerTag="$branch"
              commitDockerTag="$branch-${{ env.githubSha }}"
            fi
          fi

          dockerTags=""
          githubTags=""

          if [ -n "$latestDockerTag" ]; then
            dockerTags="$dockerTags,${{ inputs.dockerRepository }}:$latestDockerTag"
            githubTags="$githubTags,ghcr.io/${{ env.githubRepository }}:$latestDockerTag"
          fi

          if [ -n "$versionDockerTag" ]; then
            dockerTags="$dockerTags,${{ inputs.dockerRepository }}:$versionDockerTag"
            githubTags="$githubTags,ghcr.io/${{ env.githubRepository }}:$versionDockerTag"
          fi

          # set env vars
          echo "branch=$branch" >> $GITHUB_ENV
          echo "dockerTags=$dockerTags" >> $GITHUB_ENV
          echo "githubTags=$githubTags" >> $GITHUB_ENV

      - name: Get vault secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_HOST }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets:
            secrets/data/docker username | DOCKER_USERNAME;
            secrets/data/docker password | DOCKER_PASSWORD;
            secrets/data/github repo_readonly_pat | REPO_READONLY_PAT;
            secrets/data/github packages_pat | PACKAGES_PAT

      - name: Checkout target repository
        uses: actions/checkout@v4
        timeout-minutes: 1
        with:
          repository: ${{ env.githubRepository }}
          ref: ${{ env.branch }}
          token: ${{ env.REPO_READONLY_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Create Dockerfile
        working-directory: code
        timeout-minutes: 2
        run: |
          touch Dockerfile

          echo -e "FROM --platform=\$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:${{ inputs.baseImage }} AS build" >> Dockerfile
          echo -e "ARG TARGETARCH" >> Dockerfile
          echo -e "WORKDIR /app" >> Dockerfile
          echo -e "EXPOSE 8080 \n" >> Dockerfile
          echo -e "COPY . ./ \n" >> Dockerfile
          # echo -e "RUN dotnet nuget add source --name dotnet8 https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json" >> Dockerfile
          echo -e "RUN dotnet nuget add source --username Flaminel --password ${{ secrets.PACKAGES_PAT }} --store-password-in-clear-text --name flm https://nuget.pkg.github.com/Flaminel/index.json" >> Dockerfile
          echo -e "RUN dotnet nuget add source --username Flaminel --password ${{ secrets.PACKAGES_PAT }} --store-password-in-clear-text --name flmorg https://nuget.pkg.github.com/flmorg/index.json" >> Dockerfile
          echo -e "RUN dotnet publish "./${{ inputs.executableName }}/${{ inputs.executableName }}.csproj" \ " >> Dockerfile
          echo -e "-a \$TARGETARCH \ " >> Dockerfile
          echo -e "-c Release \ " >> Dockerfile
          echo -n "-o /app/publish" >> Dockerfile

          if [ "${{ inputs.selfContained }}" = true ] ; then
            echo -e " \ " >> Dockerfile
            echo -e "--self-contained \ " >> Dockerfile
            echo -e "--use-current-runtime \ " >> Dockerfile
            echo -e "/p:StripSymbols=true \ " >> Dockerfile
            # echo -e "/p:PublishTrimmed=true \ " >> Dockerfile
            echo -e "/p:PublishSingleFile=true \n" >> Dockerfile
            echo -e "FROM mcr.microsoft.com/dotnet/runtime-deps:${{ inputs.baseImage }} \n" >> Dockerfile
            entrypoint="ENTRYPOINT [\"./${{ inputs.outputName }}\"]"
          else
            echo -e "" >> Dockerfile
            echo -e "FROM mcr.microsoft.com/dotnet/aspnet:${{ inputs.baseImage }} \n" >> Dockerfile
            entrypoint="ENTRYPOINT [\"dotnet\", \"${{ inputs.outputName }}.dll\"]"
          fi

          echo -e "WORKDIR /app" >> Dockerfile
          echo -e "COPY --from=build /app/publish ." >> Dockerfile
          echo -e "${entrypoint}" >> Dockerfile

          cat Dockerfile

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ fromJSON(inputs.githubContext).repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push docker image
        timeout-minutes: 15
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/code
          file: ${{ github.workspace }}/code/Dockerfile
          provenance: false
          labels: |
            commit=sha-${{ env.githubSha }}
          outputs: |
            type=image
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            ${{ env.dockerTags }}
            ${{ env.githubTags }}